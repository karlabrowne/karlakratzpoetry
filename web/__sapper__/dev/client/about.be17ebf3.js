import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, o as onMount, c as client, u as urlFor, f as fade, g as globals, y as empty, m as insert_dev, j as detach_dev, e as element, w as space, t as text, a as claim_element, b as children, x as claim_space, h as claim_text, k as attr_dev, l as add_location, n as append_dev, z as transition_out, A as check_outros, B as transition_in, H as HtmlTag, C as group_outros, D as set_style, E as noop, q as add_render_callback, r as create_bidirectional_transition } from './client.c79bacb6.js';
import { b as blocksToHtml_1 } from './blocksToHtml.00e050ea.js';

/* src/routes/about.svelte generated by Svelte v3.37.0 */

const { console: console_1 } = globals;
const file = "src/routes/about.svelte";

// (30:4) {:else}
function create_else_block(ctx) {
	let div;
	let div_transition;
	let current;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			children(div).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "width", "400px");
			set_style(div, "height", "400px");
			set_style(div, "background-color", "var(--gray)");
			attr_dev(div, "class", "svelte-1hnhq01");
			add_location(div, file, 30, 6, 1340);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, false);
			div_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching && div_transition) div_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(30:4) {:else}",
		ctx
	});

	return block;
}

// (28:4) {#if mainImage}
function create_if_block_2(ctx) {
	let img;
	let img_alt_value;
	let img_src_value;
	let img_transition;
	let current;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { alt: true, src: true, class: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "alt", img_alt_value = /*mainImage*/ ctx[0].alt);
			if (img.src !== (img_src_value = urlFor(/*mainImage*/ ctx[0]).url())) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "svelte-1hnhq01");
			add_location(img, file, 28, 6, 1244);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*mainImage*/ 1 && img_alt_value !== (img_alt_value = /*mainImage*/ ctx[0].alt)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (!current || dirty & /*mainImage*/ 1 && img.src !== (img_src_value = urlFor(/*mainImage*/ ctx[0]).url())) {
				attr_dev(img, "src", img_src_value);
			}
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!img_transition) img_transition = create_bidirectional_transition(img, fade, {}, true);
				img_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			if (!img_transition) img_transition = create_bidirectional_transition(img, fade, {}, false);
			img_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching && img_transition) img_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(28:4) {#if mainImage}",
		ctx
	});

	return block;
}

// (36:4) {#if artistStatement}
function create_if_block_1(ctx) {
	let html_tag;
	let raw_value = blocksToHtml_1({ blocks: /*artistStatement*/ ctx[1] }) + "";
	let html_anchor;

	const block = {
		c: function create() {
			html_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			html_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(html_anchor);
		},
		m: function mount(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert_dev(target, html_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*artistStatement*/ 2 && raw_value !== (raw_value = blocksToHtml_1({ blocks: /*artistStatement*/ ctx[1] }) + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(html_anchor);
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(36:4) {#if artistStatement}",
		ctx
	});

	return block;
}

// (41:4) {#if bio}
function create_if_block(ctx) {
	let html_tag;
	let raw_value = blocksToHtml_1({ blocks: /*bio*/ ctx[2] }) + "";
	let html_anchor;

	const block = {
		c: function create() {
			html_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			html_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(html_anchor);
		},
		m: function mount(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert_dev(target, html_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*bio*/ 4 && raw_value !== (raw_value = blocksToHtml_1({ blocks: /*bio*/ ctx[2] }) + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(html_anchor);
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(41:4) {#if bio}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div2;
	let div0;
	let current_block_type_index;
	let if_block0;
	let t0;
	let div1;
	let h20;
	let t1;
	let t2;
	let t3;
	let h21;
	let t4;
	let t5;
	let current;
	const if_block_creators = [create_if_block_2, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*mainImage*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*artistStatement*/ ctx[1] && create_if_block_1(ctx);
	let if_block2 = /*bio*/ ctx[2] && create_if_block(ctx);

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			if_block0.c();
			t0 = space();
			div1 = element("div");
			h20 = element("h2");
			t1 = text("Artist Statement");
			t2 = space();
			if (if_block1) if_block1.c();
			t3 = space();
			h21 = element("h2");
			t4 = text("Bio");
			t5 = space();
			if (if_block2) if_block2.c();
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { id: true, class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { id: true, class: true });
			var div0_nodes = children(div0);
			if_block0.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { id: true, class: true });
			var div1_nodes = children(div1);
			h20 = claim_element(div1_nodes, "H2", {});
			var h20_nodes = children(h20);
			t1 = claim_text(h20_nodes, "Artist Statement");
			h20_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			if (if_block1) if_block1.l(div1_nodes);
			t3 = claim_space(div1_nodes);
			h21 = claim_element(div1_nodes, "H2", {});
			var h21_nodes = children(h21);
			t4 = claim_text(h21_nodes, "Bio");
			h21_nodes.forEach(detach_dev);
			t5 = claim_space(div1_nodes);
			if (if_block2) if_block2.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "id", "image");
			attr_dev(div0, "class", "svelte-1hnhq01");
			add_location(div0, file, 26, 2, 1201);
			add_location(h20, file, 34, 4, 1477);
			add_location(h21, file, 39, 2, 1597);
			attr_dev(div1, "id", "text");
			attr_dev(div1, "class", "svelte-1hnhq01");
			add_location(div1, file, 33, 2, 1457);
			attr_dev(div2, "id", "about-row");
			attr_dev(div2, "class", "svelte-1hnhq01");
			add_location(div2, file, 25, 0, 1178);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			if_blocks[current_block_type_index].m(div0, null);
			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div1, h20);
			append_dev(h20, t1);
			append_dev(div1, t2);
			if (if_block1) if_block1.m(div1, null);
			append_dev(div1, t3);
			append_dev(div1, h21);
			append_dev(h21, t4);
			append_dev(div1, t5);
			if (if_block2) if_block2.m(div1, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(div0, null);
			}

			if (/*artistStatement*/ ctx[1]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(div1, t3);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*bio*/ ctx[2]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					if_block2.m(div1, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const query = "*[_id == \"aboutPage\"][0]";

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("About", slots, []);

	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P
			? value
			: new P(function (resolve) {
						resolve(value);
					});
		}

		return new (P || (P = Promise))(function (resolve, reject) {
				function fulfilled(value) {
					try {
						step(generator.next(value));
					} catch(e) {
						reject(e);
					}
				}

				function rejected(value) {
					try {
						step(generator["throw"](value));
					} catch(e) {
						reject(e);
					}
				}

				function step(result) {
					result.done
					? resolve(result.value)
					: adopt(result.value).then(fulfilled, rejected);
				}

				step((generator = generator.apply(thisArg, _arguments || [])).next());
			});
	};

	let mainImage;
	let artistStatement;
	let bio;

	onMount(() => __awaiter(void 0, void 0, void 0, function* () {
		let res = yield client.fetch(query);
		console.log(res);
		return $$invalidate(0, { mainImage, artistStatement, bio } = res, mainImage, $$invalidate(1, artistStatement), $$invalidate(2, bio));
	}));

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<About> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		__awaiter,
		client,
		urlFor,
		onMount,
		fade,
		blocksToHtml: blocksToHtml_1,
		query,
		mainImage,
		artistStatement,
		bio
	});

	$$self.$inject_state = $$props => {
		if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
		if ("mainImage" in $$props) $$invalidate(0, mainImage = $$props.mainImage);
		if ("artistStatement" in $$props) $$invalidate(1, artistStatement = $$props.artistStatement);
		if ("bio" in $$props) $$invalidate(2, bio = $$props.bio);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [mainImage, artistStatement, bio];
}

class About extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "About",
			options,
			id: create_fragment.name
		});
	}
}

export default About;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJvdXQuYmUxN2ViZjMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvYWJvdXQuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQgbGFuZz1cInRzXCI+XG5cdGltcG9ydCB7IGNsaWVudCwgdXJsRm9yIH0gZnJvbSAnLi4vY29tcG9uZW50cy9TYW5pdHlDbGllbnQnXG5cdGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnXG5cdGltcG9ydCB7IGZhZGUgfSBmcm9tICdzdmVsdGUvdHJhbnNpdGlvbidcbiAgaW1wb3J0IGJsb2Nrc1RvSHRtbCBmcm9tICdAc2FuaXR5L2Jsb2NrLWNvbnRlbnQtdG8taHRtbCdcblxuICBjb25zdCBxdWVyeTpzdHJpbmcgPSAnKltfaWQgPT0gXCJhYm91dFBhZ2VcIl1bMF0nXG5cbiAgbGV0IG1haW5JbWFnZTphbnlcbiAgbGV0IGFydGlzdFN0YXRlbWVudDpBcnJheTxhbnk+XG4gIGxldCBiaW86IEFycmF5PGFueT5cblxuICBvbk1vdW50KGFzeW5jICgpID0+IHtcblx0XHRsZXQgcmVzID0gYXdhaXQgY2xpZW50LmZldGNoKHF1ZXJ5KVxuICAgIGNvbnNvbGUubG9nKHJlcylcblx0XHRyZXR1cm4geyBtYWluSW1hZ2UsIGFydGlzdFN0YXRlbWVudCwgYmlvIH0gPSByZXNcblx0fSk7XG48L3NjcmlwdD5cblxuXG48ZGl2IGlkPVwiYWJvdXQtcm93XCI+XG4gIDxkaXYgaWQ9XCJpbWFnZVwiPlxuICAgIHsjaWYgbWFpbkltYWdlfVxuICAgICAgPGltZyBhbHQ9XCJ7bWFpbkltYWdlLmFsdH1cIiBzcmM9XCJ7IHVybEZvcihtYWluSW1hZ2UpLnVybCgpIH1cIiB0cmFuc2l0aW9uOmZhZGU+XG4gICAgezplbHNlfVxuICAgICAgPGRpdiBzdHlsZT1cIndpZHRoOiA0MDBweDsgaGVpZ2h0OiA0MDBweDsgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tZ3JheSk7XCIgdHJhbnNpdGlvbjpmYWRlPjwvZGl2PlxuICAgIHsvaWZ9XG4gIDwvZGl2PlxuICA8ZGl2IGlkPVwidGV4dFwiPlxuICAgIDxoMj5BcnRpc3QgU3RhdGVtZW50PC9oMj5cbiAgICB7I2lmIGFydGlzdFN0YXRlbWVudH1cbiAgICAgIHtAaHRtbCBibG9ja3NUb0h0bWwoe2Jsb2NrczogYXJ0aXN0U3RhdGVtZW50IH0pfVxuICAgIHsvaWZ9XG5cblx0XHQ8aDI+QmlvPC9oMj5cbiAgICB7I2lmIGJpb31cbiAgICAgIHtAaHRtbCBibG9ja3NUb0h0bWwoe2Jsb2NrczogYmlvIH0pfVxuICAgIHsvaWZ9XG4gIDwvZGl2PlxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgI2Fib3V0LXJvdyB7XG4gICAgZGlzcGxheTogZ3JpZDtcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcbiAgICBncmlkLXRlbXBsYXRlLXJvd3M6IGF1dG87XG4gICAgZ2FwOiA2cmVtO1xuICB9XG5cbiAgI2ltYWdlID4gKiB7XG5cdFx0bWFyZ2luOiAwIGF1dG87XG5cdFx0ZGlzcGxheTogYmxvY2s7XG5cdH1cblxuXHRpbWcge1xuXHRcdHdpZHRoOiAxMDAlO1xuXHRcdG1heC13aWR0aDogNDAwcHg7XG5cdH1cblxuXHQjdGV4dCB7XG4gICAgbWF4LXdpZHRoOiA2MGNoO1xuXHR9XG5cbiAgQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogNzY4cHgpe1xuICAgICNhYm91dC1yb3cge1xuICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgM2ZyO1xuICAgIH1cbiAgfVxuPC9zdHlsZT4iXSwibmFtZXMiOlsiYmxvY2tzVG9IdG1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztzREF1QmlCLEdBQVMsSUFBQyxHQUFHO29DQUFVLE1BQU0sZUFBQyxHQUFTLEtBQUUsR0FBRzs7Ozs7Ozs7OytGQUE1QyxHQUFTLElBQUMsR0FBRzs7OzsyRUFBVSxNQUFNLGVBQUMsR0FBUyxLQUFFLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztpQkFRaERBLGNBQVksR0FBRSxNQUFNLHNCQUFFLEdBQWU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21FQUFyQ0EsY0FBWSxHQUFFLE1BQU0sc0JBQUUsR0FBZTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztpQkFLckNBLGNBQVksR0FBRSxNQUFNLFVBQUUsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7dURBQXpCQSxjQUFZLEdBQUUsTUFBTSxVQUFFLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQWQ3QixHQUFTOzs7Ozs7cUNBUVQsR0FBZTt5QkFLZixHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyQkFMSCxHQUFlOzs7Ozs7Ozs7Ozs7O2VBS2YsR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUE3QkosS0FBSyxHQUFVLDRCQUEwQjs7Ozs7O0tBTmhDLFNBQUEsR0FBQSxJQUFBLElBQUEsSUFBQSxDQUFBLFNBQUEsY0FBQSxPQUFBLEVBQUEsVUFBQSxFQUFBLENBQUEsRUFBQSxTQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FRWCxTQUFhO0tBQ2IsZUFBMEI7S0FDMUIsR0FBZTs7Q0FFbkIsT0FBTyxPQUFZLFNBQUEsTUFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUE7TUFDZixHQUFHLFNBQVMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLO0VBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRzsyQkFDUixTQUFTLEVBQUUsZUFBZSxFQUFFLEdBQUcsS0FBSyxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
