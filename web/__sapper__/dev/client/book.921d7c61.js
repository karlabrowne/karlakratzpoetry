import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, o as onMount, c as client, u as urlFor, f as fade, y as empty, m as insert_dev, j as detach_dev, e as element, w as space, a as claim_element, b as children, x as claim_space, k as attr_dev, l as add_location, n as append_dev, z as transition_out, A as check_outros, B as transition_in, H as HtmlTag, C as group_outros, D as set_style, E as noop, q as add_render_callback, r as create_bidirectional_transition, t as text, h as claim_text, p as set_data_dev } from './client.9abe5052.js';
import { b as blocksToHtml_1 } from './blocksToHtml.06c69f9c.js';

/* src/routes/book.svelte generated by Svelte v3.37.0 */
const file = "src/routes/book.svelte";

// (28:4) {:else}
function create_else_block_1(ctx) {
	let div;
	let div_transition;
	let current;

	const block = {
		c: function create() {
			div = element("div");
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { style: true, class: true });
			children(div).forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			set_style(div, "width", "275px");
			set_style(div, "height", "450px");
			set_style(div, "background-color", "var(--gray)");
			attr_dev(div, "class", "svelte-1j7uvhj");
			add_location(div, file, 28, 6, 1309);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, true);
				div_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			if (!div_transition) div_transition = create_bidirectional_transition(div, fade, {}, false);
			div_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching && div_transition) div_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(28:4) {:else}",
		ctx
	});

	return block;
}

// (26:4) {#if mainImage}
function create_if_block_2(ctx) {
	let img;
	let img_alt_value;
	let img_src_value;
	let img_transition;
	let current;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { alt: true, src: true, class: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "alt", img_alt_value = /*mainImage*/ ctx[0].alt);
			if (img.src !== (img_src_value = urlFor(/*mainImage*/ ctx[0]).url())) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "svelte-1j7uvhj");
			add_location(img, file, 26, 6, 1213);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*mainImage*/ 1 && img_alt_value !== (img_alt_value = /*mainImage*/ ctx[0].alt)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (!current || dirty & /*mainImage*/ 1 && img.src !== (img_src_value = urlFor(/*mainImage*/ ctx[0]).url())) {
				attr_dev(img, "src", img_src_value);
			}
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!img_transition) img_transition = create_bidirectional_transition(img, fade, {}, true);
				img_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			if (!img_transition) img_transition = create_bidirectional_transition(img, fade, {}, false);
			img_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			if (detaching && img_transition) img_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(26:4) {#if mainImage}",
		ctx
	});

	return block;
}

// (35:4) {:else}
function create_else_block(ctx) {
	let h1;
	let h1_transition;
	let current;

	const block = {
		c: function create() {
			h1 = element("h1");
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			h1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "svelte-1j7uvhj");
			add_location(h1, file, 35, 6, 1521);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!h1_transition) h1_transition = create_bidirectional_transition(h1, fade, {}, true);
				h1_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			if (!h1_transition) h1_transition = create_bidirectional_transition(h1, fade, {}, false);
			h1_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching && h1_transition) h1_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(35:4) {:else}",
		ctx
	});

	return block;
}

// (33:4) {#if heading}
function create_if_block_1(ctx) {
	let h1;
	let t;
	let h1_transition;
	let current;

	const block = {
		c: function create() {
			h1 = element("h1");
			t = text(/*heading*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t = claim_text(h1_nodes, /*heading*/ ctx[1]);
			h1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h1, "class", "svelte-1j7uvhj");
			add_location(h1, file, 33, 6, 1466);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h1, anchor);
			append_dev(h1, t);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (!current || dirty & /*heading*/ 2) set_data_dev(t, /*heading*/ ctx[1]);
		},
		i: function intro(local) {
			if (current) return;

			add_render_callback(() => {
				if (!h1_transition) h1_transition = create_bidirectional_transition(h1, fade, {}, true);
				h1_transition.run(1);
			});

			current = true;
		},
		o: function outro(local) {
			if (!h1_transition) h1_transition = create_bidirectional_transition(h1, fade, {}, false);
			h1_transition.run(0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h1);
			if (detaching && h1_transition) h1_transition.end();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(33:4) {#if heading}",
		ctx
	});

	return block;
}

// (39:4) {#if synopsis}
function create_if_block(ctx) {
	let html_tag;
	let raw_value = blocksToHtml_1({ blocks: /*synopsis*/ ctx[2] }) + "";
	let html_anchor;

	const block = {
		c: function create() {
			html_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			html_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(html_anchor);
		},
		m: function mount(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert_dev(target, html_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*synopsis*/ 4 && raw_value !== (raw_value = blocksToHtml_1({ blocks: /*synopsis*/ ctx[2] }) + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(html_anchor);
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(39:4) {#if synopsis}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div2;
	let div0;
	let current_block_type_index;
	let if_block0;
	let t0;
	let div1;
	let current_block_type_index_1;
	let if_block1;
	let t1;
	let current;
	const if_block_creators = [create_if_block_2, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*mainImage*/ ctx[0]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const if_block_creators_1 = [create_if_block_1, create_else_block];
	const if_blocks_1 = [];

	function select_block_type_1(ctx, dirty) {
		if (/*heading*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index_1 = select_block_type_1(ctx);
	if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
	let if_block2 = /*synopsis*/ ctx[2] && create_if_block(ctx);

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			if_block0.c();
			t0 = space();
			div1 = element("div");
			if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			this.h();
		},
		l: function claim(nodes) {
			div2 = claim_element(nodes, "DIV", { id: true, class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { id: true, class: true });
			var div0_nodes = children(div0);
			if_block0.l(div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { id: true, class: true });
			var div1_nodes = children(div1);
			if_block1.l(div1_nodes);
			t1 = claim_space(div1_nodes);
			if (if_block2) if_block2.l(div1_nodes);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "id", "image");
			attr_dev(div0, "class", "svelte-1j7uvhj");
			add_location(div0, file, 24, 2, 1170);
			attr_dev(div1, "id", "text");
			attr_dev(div1, "class", "svelte-1j7uvhj");
			add_location(div1, file, 31, 2, 1426);
			attr_dev(div2, "id", "book-row");
			attr_dev(div2, "class", "svelte-1j7uvhj");
			add_location(div2, file, 23, 0, 1148);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			if_blocks[current_block_type_index].m(div0, null);
			append_dev(div2, t0);
			append_dev(div2, div1);
			if_blocks_1[current_block_type_index_1].m(div1, null);
			append_dev(div1, t1);
			if (if_block2) if_block2.m(div1, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(div0, null);
			}

			let previous_block_index_1 = current_block_type_index_1;
			current_block_type_index_1 = select_block_type_1(ctx);

			if (current_block_type_index_1 === previous_block_index_1) {
				if_blocks_1[current_block_type_index_1].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
					if_blocks_1[previous_block_index_1] = null;
				});

				check_outros();
				if_block1 = if_blocks_1[current_block_type_index_1];

				if (!if_block1) {
					if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(div1, t1);
			}

			if (/*synopsis*/ ctx[2]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block(ctx);
					if_block2.c();
					if_block2.m(div1, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if_blocks[current_block_type_index].d();
			if_blocks_1[current_block_type_index_1].d();
			if (if_block2) if_block2.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const query = "*[_id == \"bookPage\"][0]";

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Book", slots, []);

	var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
		function adopt(value) {
			return value instanceof P
			? value
			: new P(function (resolve) {
						resolve(value);
					});
		}

		return new (P || (P = Promise))(function (resolve, reject) {
				function fulfilled(value) {
					try {
						step(generator.next(value));
					} catch(e) {
						reject(e);
					}
				}

				function rejected(value) {
					try {
						step(generator["throw"](value));
					} catch(e) {
						reject(e);
					}
				}

				function step(result) {
					result.done
					? resolve(result.value)
					: adopt(result.value).then(fulfilled, rejected);
				}

				step((generator = generator.apply(thisArg, _arguments || [])).next());
			});
	};

	let mainImage;
	let heading;
	let synopsis;

	onMount(() => __awaiter(void 0, void 0, void 0, function* () {
		let res = yield client.fetch(query);
		return $$invalidate(0, { mainImage, heading, synopsis } = res, mainImage, $$invalidate(1, heading), $$invalidate(2, synopsis));
	}));

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Book> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({
		__awaiter,
		client,
		urlFor,
		onMount,
		fade,
		blocksToHtml: blocksToHtml_1,
		query,
		mainImage,
		heading,
		synopsis
	});

	$$self.$inject_state = $$props => {
		if ("__awaiter" in $$props) __awaiter = $$props.__awaiter;
		if ("mainImage" in $$props) $$invalidate(0, mainImage = $$props.mainImage);
		if ("heading" in $$props) $$invalidate(1, heading = $$props.heading);
		if ("synopsis" in $$props) $$invalidate(2, synopsis = $$props.synopsis);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [mainImage, heading, synopsis];
}

class Book extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Book",
			options,
			id: create_fragment.name
		});
	}
}

export default Book;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9vay45MjFkN2M2MS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3JvdXRlcy9ib29rLnN2ZWx0ZSJdLCJzb3VyY2VzQ29udGVudCI6WyI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICBpbXBvcnQgeyBjbGllbnQsIHVybEZvciB9IGZyb20gJy4uL2NvbXBvbmVudHMvU2FuaXR5Q2xpZW50J1xuXHRpbXBvcnQgeyBvbk1vdW50IH0gZnJvbSAnc3ZlbHRlJ1xuXHRpbXBvcnQgeyBmYWRlIH0gZnJvbSAnc3ZlbHRlL3RyYW5zaXRpb24nXG4gIGltcG9ydCBibG9ja3NUb0h0bWwgZnJvbSAnQHNhbml0eS9ibG9jay1jb250ZW50LXRvLWh0bWwnXG5cbiAgY29uc3QgcXVlcnk6c3RyaW5nID0gJypbX2lkID09IFwiYm9va1BhZ2VcIl1bMF0nXG5cbiAgbGV0IG1haW5JbWFnZTphbnlcbiAgbGV0IGhlYWRpbmc6c3RyaW5nXG4gIGxldCBzeW5vcHNpczphbnlcblxuICBvbk1vdW50KGFzeW5jICgpID0+IHtcblx0XHRsZXQgcmVzID0gYXdhaXQgY2xpZW50LmZldGNoKHF1ZXJ5KVxuXHRcdHJldHVybiB7IG1haW5JbWFnZSwgaGVhZGluZywgc3lub3BzaXMgfSA9IHJlc1xuXHR9KTtcbjwvc2NyaXB0PlxuXG48ZGl2IGlkPVwiYm9vay1yb3dcIj5cbiAgPGRpdiBpZD1cImltYWdlXCI+XG4gICAgeyNpZiBtYWluSW1hZ2V9XG4gICAgICA8aW1nIGFsdD1cInttYWluSW1hZ2UuYWx0fVwiIHNyYz1cInsgdXJsRm9yKG1haW5JbWFnZSkudXJsKCkgfVwiIHRyYW5zaXRpb246ZmFkZT5cbiAgICB7OmVsc2V9XG4gICAgICA8ZGl2IHN0eWxlPVwid2lkdGg6IDI3NXB4OyBoZWlnaHQ6IDQ1MHB4OyBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1ncmF5KTtcIiB0cmFuc2l0aW9uOmZhZGU+PC9kaXY+XG4gICAgey9pZn1cbiAgPC9kaXY+XG4gIDxkaXYgaWQ9XCJ0ZXh0XCI+XG4gICAgeyNpZiBoZWFkaW5nfVxuICAgICAgPGgxIHRyYW5zaXRpb246ZmFkZT57IGhlYWRpbmcgfTwvaDE+XG4gICAgezplbHNlfVxuICAgICAgPGgxIHRyYW5zaXRpb246ZmFkZT4gPC9oMT5cbiAgICB7L2lmfVxuXG4gICAgeyNpZiBzeW5vcHNpc31cbiAgICAgIHtAaHRtbCBibG9ja3NUb0h0bWwoe2Jsb2Nrczogc3lub3BzaXMgfSl9XG4gICAgey9pZn1cbiAgPC9kaXY+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAjYm9vay1yb3cge1xuICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnI7XG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvO1xuICAgIGdhcDogM3JlbTtcbiAgfVxuXG4gICNpbWFnZSA+ICoge1xuXHRcdG1hcmdpbjogMCBhdXRvO1xuXHRcdGRpc3BsYXk6IGJsb2NrO1xuXHR9XG5cblx0aW1nIHtcblx0XHR3aWR0aDogMTAwJTtcblx0XHRtYXgtd2lkdGg6IDQwMHB4O1xuXHR9XG5cblx0I3RleHQgKiB7XG5cdFx0bWFyZ2luOiAxZW0gYXV0bztcblx0fVxuXG4gIEBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDc2OHB4KXtcbiAgICAjYm9vay1yb3cge1xuICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMmZyO1xuICAgIH1cbiAgfVxuPC9zdHlsZT4iXSwibmFtZXMiOlsiYmxvY2tzVG9IdG1sIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7c0RBcUJpQixHQUFTLElBQUMsR0FBRztvQ0FBVSxNQUFNLGVBQUMsR0FBUyxLQUFFLEdBQUc7Ozs7Ozs7OzsrRkFBNUMsR0FBUyxJQUFDLEdBQUc7Ozs7MkVBQVUsTUFBTSxlQUFDLEdBQVMsS0FBRSxHQUFHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFPakMsR0FBTzs7Ozs7O3dDQUFQLEdBQU87Ozs7Ozs7Ozs7Ozs7O3NFQUFQLEdBQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUJBTXRCQSxjQUFZLEdBQUUsTUFBTSxlQUFFLEdBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzREQUE5QkEsY0FBWSxHQUFFLE1BQU0sZUFBRSxHQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQWRsQyxHQUFTOzs7Ozs7Ozs7O2tCQU9ULEdBQU87Ozs7Ozs4QkFNUCxHQUFROzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQUFSLEdBQVE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7TUEzQlQsS0FBSyxHQUFVLDJCQUF5Qjs7Ozs7O0tBTi9CLFNBQUEsR0FBQSxJQUFBLElBQUEsSUFBQSxDQUFBLFNBQUEsY0FBQSxPQUFBLEVBQUEsVUFBQSxFQUFBLENBQUEsRUFBQSxTQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7S0FRWCxTQUFhO0tBQ2IsT0FBYztLQUNkLFFBQVk7O0NBRWhCLE9BQU8sT0FBWSxTQUFBLE1BQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBO01BQ2YsR0FBRyxTQUFTLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSzsyQkFDekIsU0FBUyxFQUFFLE9BQU8sRUFBRSxRQUFRLEtBQUssR0FBRzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
